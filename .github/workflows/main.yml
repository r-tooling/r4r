name: CI Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:

jobs:
  build-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          # Adjust the cache path as needed
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ hashFiles('.devcontainer/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .devcontainer
          push: true
          # Use the defined Docker image variable
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,new=true

  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: build-image
    container: ghcr.io/${{ github.repository }}:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Configure cmake
        run: make configure
      - name: Build project
        run: make build
      - name: Run tests
        run: make test

  # coverage:
  #   name: Code Coverage
  #   runs-on: ubuntu-latest
  #   needs: build
  #   container: ghcr.io/${{ github.repository }}:latest
  #   env:
  #     BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
  #     - name: Install build wrapper
  #       uses: SonarSource/sonarqube-scan-action/install-build-wrapper@v4
  #     - name: Run build wrapper
  #       run: |
  #         build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} make coverage
  #     - name: Run SonarCloud scan
  #       uses: SonarSource/sonarqube-scan-action@v4
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       with:
  #         args: >
  #           --define sonar.cfamily.compile-commands="${{ env.BUILD_WRAPPER_OUT_DIR }}/compile_commands.json"
  #     - name: Archive code coverage results
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: code-coverage-report
  #         path: |
  #           build-coverage/coverage*
  #     - name: Upload to codecov
  #       uses: codecov/codecov-action@v5
  #       with:
  #         disable_search: true
  #         files: build-coverage/coverage.info
  #         token: ${{ secrets.CODECOV_TOKEN }}

  build-it-image:
    name: Build and Push Docker Image for integration tests
    runs-on: ubuntu-latest
    needs: build-image
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          # Adjust the cache path as needed
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-it-${{ hashFiles('tests-integration/Dockerfile', 'tests-integration/entrypoint.sh') }}
          restore-keys: |
            ${{ runner.os }}-docker-it-

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./tests-integration/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}-it:latest
            ghcr.io/${{ github.repository }}-it:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,new=true

  tests-integration:
    name: Integration tests
    runs-on: ubuntu-latest
    needs: build-it-image
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run integration test r-hello-world
        run: make -C tests-integration r-hello-world
        env:
          HOST_UID: 1000
          HOST_GID: 1000

      - name: Run integration test r-ggplot
        run: make -C tests-integration r-ggplot
        env:
          HOST_UID: 1000
          HOST_GID: 1000

  release:
    name: Create release
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: tests-integration
    container: ghcr.io/${{ github.repository }}:latest
    permissions:
      contents: write
      packages: read
    env:
      RELEASE_NAME: r4r-${{ github.ref_name }}.tar.gz
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure cmake
        run: make configure
      
      - name: Build release
        run: make release

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.RELEASE_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}