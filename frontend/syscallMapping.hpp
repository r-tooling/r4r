#pragma once
#include <optional>
#include <string_view>

/*
    This is a constant that determines which syscall number is considered to be
   the highest known.
*/
constexpr size_t MaxSyscallNr = 449;

// https://stackoverflow.com/questions/152016/detecting-cpu-architecture-compile-time
constexpr std::string_view
getBuild() noexcept { // Get current architecture, detectx nearly every
                      // architecture. Coded by Freak
    using namespace std::string_view_literals;

#if defined(__x86_64__) || defined(_M_X64)
    return "x86_64"sv;
#elif defined(i386) || defined(__i386__) || defined(__i386) || defined(_M_IX86)
    return "x86_32"sv;
#elif defined(__ARM_ARCH_2__)
    return "ARM2"sv;
#elif defined(__ARM_ARCH_3__) || defined(__ARM_ARCH_3M__)
    return "ARM3"sv;
#elif defined(__ARM_ARCH_4T__) || defined(__TARGET_ARM_4T)
    return "ARM4T"sv;
#elif defined(__ARM_ARCH_5_) || defined(__ARM_ARCH_5E_)
    return "ARM5"sv
#elif defined(__ARM_ARCH_6T2_) || defined(__ARM_ARCH_6T2_)
    return "ARM6T2"sv;
#elif defined(__ARM_ARCH_6__) || defined(__ARM_ARCH_6J__) ||                   \
    defined(__ARM_ARCH_6K__) || defined(__ARM_ARCH_6Z__) ||                    \
    defined(__ARM_ARCH_6ZK__)
    return "ARM6"sv;
#elif defined(__ARM_ARCH_7__) || defined(__ARM_ARCH_7A__) ||                   \
    defined(__ARM_ARCH_7R__) || defined(__ARM_ARCH_7M__) ||                    \
    defined(__ARM_ARCH_7S__)
    return "ARM7"sv;
#elif defined(__ARM_ARCH_7A__) || defined(__ARM_ARCH_7R__) ||                  \
    defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7S__)
    return "ARM7A"sv;
#elif defined(__ARM_ARCH_7R__) || defined(__ARM_ARCH_7M__) ||                  \
    defined(__ARM_ARCH_7S__)
    return "ARM7R"sv;
#elif defined(__ARM_ARCH_7M__)
    return "ARM7M"sv;
#elif defined(__ARM_ARCH_7S__)
    return "ARM7S"sv;
#elif defined(__aarch64__) || defined(_M_ARM64)
    return "ARM64"sv;
#elif defined(mips) || defined(__mips__) || defined(__mips)
    return "MIPS"sv;
#elif defined(__sh__)
    return "SUPERH"sv;
#elif defined(__powerpc) || defined(__powerpc__) || defined(__powerpc64__) ||  \
    defined(__POWERPC__) || defined(__ppc__) || defined(__PPC__) ||            \
    defined(_ARCH_PPC)
    return "POWERPC"sv;
#elif defined(__PPC64__) || defined(__ppc64__) || defined(_ARCH_PPC64)
    return "POWERPC64"sv;
#elif defined(__sparc__) || defined(__sparc)
    return "SPARC"sv;
#elif defined(__m68k__)
    return "M68K"sv;
#else
    return "UNKNOWN"sv;
#endif
}

static_assert(getBuild() == std::string_view{"x86_64"},
              "This header shoudl only be included for the given architecture "
              "as otherwise the syscall # will not match.");

// decide if you want to hide  definition in a cpp file or if we try to make a
// constexpr variant work. as this include is here only for the implementation,
// not the API.
#include <unordered_map>

// these could be a constexpr variant of a constexpr map which gets hidden
// inside a if(constexpr) block.
//  but alas, there is no way to iterate over all defined macros as of now so
//  not constructing these from the sys/syscalls header
//  //generated via
// ausyscall x86_64 --dump | awk 'BEGIN{print
// "std::unordered_map<long,std::string_view> map{" } { print "{" $1 ",\"" $2
// "\"sv}," } END{ print "}"}'
inline std::optional<const std::string_view>
getSyscallName(long syscallNr) noexcept {
    using namespace std::string_view_literals;

    const static std::unordered_map<long, std::string_view> map{
        {0, "read"sv},
        {1, "write"sv},
        {2, "open"sv},
        {3, "close"sv},
        {4, "stat"sv},
        {5, "fstat"sv},
        {6, "lstat"sv},
        {7, "poll"sv},
        {8, "lseek"sv},
        {9, "mmap"sv},
        {10, "mprotect"sv},
        {11, "munmap"sv},
        {12, "brk"sv},
        {13, "rt_sigaction"sv},
        {14, "rt_sigprocmask"sv},
        {15, "rt_sigreturn"sv},
        {16, "ioctl"sv},
        {17, "pread"sv},
        {18, "pwrite"sv},
        {19, "readv"sv},
        {20, "writev"sv},
        {21, "access"sv},
        {22, "pipe"sv},
        {23, "select"sv},
        {24, "sched_yield"sv},
        {25, "mremap"sv},
        {26, "msync"sv},
        {27, "mincore"sv},
        {28, "madvise"sv},
        {29, "shmget"sv},
        {30, "shmat"sv},
        {31, "shmctl"sv},
        {32, "dup"sv},
        {33, "dup2"sv},
        {34, "pause"sv},
        {35, "nanosleep"sv},
        {36, "getitimer"sv},
        {37, "alarm"sv},
        {38, "setitimer"sv},
        {39, "getpid"sv},
        {40, "sendfile"sv},
        {41, "socket"sv},
        {42, "connect"sv},
        {43, "accept"sv},
        {44, "sendto"sv},
        {45, "recvfrom"sv},
        {46, "sendmsg"sv},
        {47, "recvmsg"sv},
        {48, "shutdown"sv},
        {49, "bind"sv},
        {50, "listen"sv},
        {51, "getsockname"sv},
        {52, "getpeername"sv},
        {53, "socketpair"sv},
        {54, "setsockopt"sv},
        {55, "getsockopt"sv},
        {56, "clone"sv},
        {57, "fork"sv},
        {58, "vfork"sv},
        {59, "execve"sv},
        {60, "exit"sv},
        {61, "wait4"sv},
        {62, "kill"sv},
        {63, "uname"sv},
        {64, "semget"sv},
        {65, "semop"sv},
        {66, "semctl"sv},
        {67, "shmdt"sv},
        {68, "msgget"sv},
        {69, "msgsnd"sv},
        {70, "msgrcv"sv},
        {71, "msgctl"sv},
        {72, "fcntl"sv},
        {73, "flock"sv},
        {74, "fsync"sv},
        {75, "fdatasync"sv},
        {76, "truncate"sv},
        {77, "ftruncate"sv},
        {78, "getdents"sv},
        {79, "getcwd"sv},
        {80, "chdir"sv},
        {81, "fchdir"sv},
        {82, "rename"sv},
        {83, "mkdir"sv},
        {84, "rmdir"sv},
        {85, "creat"sv},
        {86, "link"sv},
        {87, "unlink"sv},
        {88, "symlink"sv},
        {89, "readlink"sv},
        {90, "chmod"sv},
        {91, "fchmod"sv},
        {92, "chown"sv},
        {93, "fchown"sv},
        {94, "lchown"sv},
        {95, "umask"sv},
        {96, "gettimeofday"sv},
        {97, "getrlimit"sv},
        {98, "getrusage"sv},
        {99, "sysinfo"sv},
        {100, "times"sv},
        {101, "ptrace"sv},
        {102, "getuid"sv},
        {103, "syslog"sv},
        {104, "getgid"sv},
        {105, "setuid"sv},
        {106, "setgid"sv},
        {107, "geteuid"sv},
        {108, "getegid"sv},
        {109, "setpgid"sv},
        {110, "getppid"sv},
        {111, "getpgrp"sv},
        {112, "setsid"sv},
        {113, "setreuid"sv},
        {114, "setregid"sv},
        {115, "getgroups"sv},
        {116, "setgroups"sv},
        {117, "setresuid"sv},
        {118, "getresuid"sv},
        {119, "setresgid"sv},
        {120, "getresgid"sv},
        {121, "getpgid"sv},
        {122, "setfsuid"sv},
        {123, "setfsgid"sv},
        {124, "getsid"sv},
        {125, "capget"sv},
        {126, "capset"sv},
        {127, "rt_sigpending"sv},
        {128, "rt_sigtimedwait"sv},
        {129, "rt_sigqueueinfo"sv},
        {130, "rt_sigsuspend"sv},
        {131, "sigaltstack"sv},
        {132, "utime"sv},
        {133, "mknod"sv},
        {134, "uselib"sv},
        {135, "personality"sv},
        {136, "ustat"sv},
        {137, "statfs"sv},
        {138, "fstatfs"sv},
        {139, "sysfs"sv},
        {140, "getpriority"sv},
        {141, "setpriority"sv},
        {142, "sched_setparam"sv},
        {143, "sched_getparam"sv},
        {144, "sched_setscheduler"sv},
        {145, "sched_getscheduler"sv},
        {146, "sched_get_priority_max"sv},
        {147, "sched_get_priority_min"sv},
        {148, "sched_rr_get_interval"sv},
        {149, "mlock"sv},
        {150, "munlock"sv},
        {151, "mlockall"sv},
        {152, "munlockall"sv},
        {153, "vhangup"sv},
        {154, "modify_ldt"sv},
        {155, "pivot_root"sv},
        {156, "_sysctl"sv},
        {157, "prctl"sv},
        {158, "arch_prctl"sv},
        {159, "adjtimex"sv},
        {160, "setrlimit"sv},
        {161, "chroot"sv},
        {162, "sync"sv},
        {163, "acct"sv},
        {164, "settimeofday"sv},
        {165, "mount"sv},
        {166, "umount2"sv},
        {167, "swapon"sv},
        {168, "swapoff"sv},
        {169, "reboot"sv},
        {170, "sethostname"sv},
        {171, "setdomainname"sv},
        {172, "iopl"sv},
        {173, "ioperm"sv},
        {174, "create_module"sv},
        {175, "init_module"sv},
        {176, "delete_module"sv},
        {177, "get_kernel_syms"sv},
        {178, "query_module"sv},
        {179, "quotactl"sv},
        {180, "nfsservctl"sv},
        {181, "getpmsg"sv},
        {182, "putpmsg"sv},
        {183, "afs_syscall"sv},
        {184, "tuxcall"sv},
        {185, "security"sv},
        {186, "gettid"sv},
        {187, "readahead"sv},
        {188, "setxattr"sv},
        {189, "lsetxattr"sv},
        {190, "fsetxattr"sv},
        {191, "getxattr"sv},
        {192, "lgetxattr"sv},
        {193, "fgetxattr"sv},
        {194, "listxattr"sv},
        {195, "llistxattr"sv},
        {196, "flistxattr"sv},
        {197, "removexattr"sv},
        {198, "lremovexattr"sv},
        {199, "fremovexattr"sv},
        {200, "tkill"sv},
        {201, "time"sv},
        {202, "futex"sv},
        {203, "sched_setaffinity"sv},
        {204, "sched_getaffinity"sv},
        {205, "set_thread_area"sv},
        {206, "io_setup"sv},
        {207, "io_destroy"sv},
        {208, "io_getevents"sv},
        {209, "io_submit"sv},
        {210, "io_cancel"sv},
        {211, "get_thread_area"sv},
        {212, "lookup_dcookie"sv},
        {213, "epoll_create"sv},
        {214, "epoll_ctl_old"sv},
        {215, "epoll_wait_old"sv},
        {216, "remap_file_pages"sv},
        {217, "getdents64"sv},
        {218, "set_tid_address"sv},
        {219, "restart_syscall"sv},
        {220, "semtimedop"sv},
        {221, "fadvise64"sv},
        {222, "timer_create"sv},
        {223, "timer_settime"sv},
        {224, "timer_gettime"sv},
        {225, "timer_getoverrun"sv},
        {226, "timer_delete"sv},
        {227, "clock_settime"sv},
        {228, "clock_gettime"sv},
        {229, "clock_getres"sv},
        {230, "clock_nanosleep"sv},
        {231, "exit_group"sv},
        {232, "epoll_wait"sv},
        {233, "epoll_ctl"sv},
        {234, "tgkill"sv},
        {235, "utimes"sv},
        {236, "vserver"sv},
        {237, "mbind"sv},
        {238, "set_mempolicy"sv},
        {239, "get_mempolicy"sv},
        {240, "mq_open"sv},
        {241, "mq_unlink"sv},
        {242, "mq_timedsend"sv},
        {243, "mq_timedreceive"sv},
        {244, "mq_notify"sv},
        {245, "mq_getsetattr"sv},
        {246, "kexec_load"sv},
        {247, "waitid"sv},
        {248, "add_key"sv},
        {249, "request_key"sv},
        {250, "keyctl"sv},
        {251, "ioprio_set"sv},
        {252, "ioprio_get"sv},
        {253, "inotify_init"sv},
        {254, "inotify_add_watch"sv},
        {255, "inotify_rm_watch"sv},
        {256, "migrate_pages"sv},
        {257, "openat"sv},
        {258, "mkdirat"sv},
        {259, "mknodat"sv},
        {260, "fchownat"sv},
        {261, "futimesat"sv},
        {262, "newfstatat"sv},
        {263, "unlinkat"sv},
        {264, "renameat"sv},
        {265, "linkat"sv},
        {266, "symlinkat"sv},
        {267, "readlinkat"sv},
        {268, "fchmodat"sv},
        {269, "faccessat"sv},
        {270, "pselect6"sv},
        {271, "ppoll"sv},
        {272, "unshare"sv},
        {273, "set_robust_list"sv},
        {274, "get_robust_list"sv},
        {275, "splice"sv},
        {276, "tee"sv},
        {277, "sync_file_range"sv},
        {278, "vmsplice"sv},
        {279, "move_pages"sv},
        {280, "utimensat"sv},
        {281, "epoll_pwait"sv},
        {282, "signalfd"sv},
        {283, "timerfd_create"sv},
        {284, "eventfd"sv},
        {285, "fallocate"sv},
        {286, "timerfd_settime"sv},
        {287, "timerfd_gettime"sv},
        {288, "accept4"sv},
        {289, "signalfd4"sv},
        {290, "eventfd2"sv},
        {291, "epoll_create1"sv},
        {292, "dup3"sv},
        {293, "pipe2"sv},
        {294, "inotify_init1"sv},
        {295, "preadv"sv},
        {296, "pwritev"sv},
        {297, "rt_tgsigqueueinfo"sv},
        {298, "perf_event_open"sv},
        {299, "recvmmsg"sv},
        {300, "fanotify_init"sv},
        {301, "fanotify_mark"sv},
        {302, "prlimit64"sv},
        {303, "name_to_handle_at"sv},
        {304, "open_by_handle_at"sv},
        {305, "clock_adjtime"sv},
        {306, "syncfs"sv},
        {307, "sendmmsg"sv},
        {308, "setns"sv},
        {309, "getcpu"sv},
        {310, "process_vm_readv"sv},
        {311, "process_vm_writev"sv},
        {312, "kcmp"sv},
        {313, "finit_module"sv},
        {314, "sched_setattr"sv},
        {315, "sched_getattr"sv},
        {316, "renameat2"sv},
        {317, "seccomp"sv},
        {318, "getrandom"sv},
        {319, "memfd_create"sv},
        {320, "kexec_file_load"sv},
        {321, "bpf"sv},
        {322, "execveat"sv},
        {323, "userfaultfd"sv},
        {324, "membarrier"sv},
        {325, "mlock2"sv},
        {326, "copy_file_range"sv},
        {327, "preadv2"sv},
        {328, "pwritev2"sv},
        {329, "pkey_mprotect"sv},
        {330, "pkey_alloc"sv},
        {331, "pkey_free"sv},
        {332, "statx"sv},
        {333, "io_pgetevents"sv},
        {334, "rseq"sv},
        {424, "pidfd_send_signal"sv},
        {425, "io_uring_setup"sv},
        {426, "io_uring_enter"sv},
        {427, "io_uring_register"sv},
        {428, "open_tree"sv},
        {429, "move_mount"sv},
        {430, "fsopen"sv},
        {431, "fsconfig"sv},
        {432, "fsmount"sv},
        {433, "fspick"sv},
        {434, "pidfd_open"sv},
        {435, "clone3"sv},
        {436, "close_range"sv},
        {437, "openat2"sv},
        {438, "pidfd_getfd"sv},
        {439, "faccessat2"sv},
        {440, "process_madvise"sv},
        {441, "epoll_pwait2"sv},
        {442, "mount_setattr"sv},
        {443, "quotactl_fd"sv},
        {444, "landlock_create_ruleset"sv},
        {445, "landlock_add_rule"sv},
        {446, "landlock_restrict_self"sv},
        {447, "memfd_secret"sv},
        {448, "process_mrelease"sv},
        {449, "futex_waitv"sv},
    };
    auto res = map.find(syscallNr);
    if (res != map.end())
        return res->second;
    else {
        return std::nullopt;
    }
}
// generated via
// ausyscall x86_64 --dump | awk 'BEGIN{print
// "std::unordered_map<std::string_view,unsigned int> map{" } { print "{" "\""
// $2 "\"sv" "," $1 "}," } END{ print "}"}'
inline std::optional<long>
getSyscallNumber(std::string_view syscallName) noexcept {
    using namespace std::string_view_literals;

    std::unordered_map<std::string_view, long> map{
        {"read"sv, 0},
        {"write"sv, 1},
        {"open"sv, 2},
        {"close"sv, 3},
        {"stat"sv, 4},
        {"fstat"sv, 5},
        {"lstat"sv, 6},
        {"poll"sv, 7},
        {"lseek"sv, 8},
        {"mmap"sv, 9},
        {"mprotect"sv, 10},
        {"munmap"sv, 11},
        {"brk"sv, 12},
        {"rt_sigaction"sv, 13},
        {"rt_sigprocmask"sv, 14},
        {"rt_sigreturn"sv, 15},
        {"ioctl"sv, 16},
        {"pread"sv, 17},
        {"pwrite"sv, 18},
        {"readv"sv, 19},
        {"writev"sv, 20},
        {"access"sv, 21},
        {"pipe"sv, 22},
        {"select"sv, 23},
        {"sched_yield"sv, 24},
        {"mremap"sv, 25},
        {"msync"sv, 26},
        {"mincore"sv, 27},
        {"madvise"sv, 28},
        {"shmget"sv, 29},
        {"shmat"sv, 30},
        {"shmctl"sv, 31},
        {"dup"sv, 32},
        {"dup2"sv, 33},
        {"pause"sv, 34},
        {"nanosleep"sv, 35},
        {"getitimer"sv, 36},
        {"alarm"sv, 37},
        {"setitimer"sv, 38},
        {"getpid"sv, 39},
        {"sendfile"sv, 40},
        {"socket"sv, 41},
        {"connect"sv, 42},
        {"accept"sv, 43},
        {"sendto"sv, 44},
        {"recvfrom"sv, 45},
        {"sendmsg"sv, 46},
        {"recvmsg"sv, 47},
        {"shutdown"sv, 48},
        {"bind"sv, 49},
        {"listen"sv, 50},
        {"getsockname"sv, 51},
        {"getpeername"sv, 52},
        {"socketpair"sv, 53},
        {"setsockopt"sv, 54},
        {"getsockopt"sv, 55},
        {"clone"sv, 56},
        {"fork"sv, 57},
        {"vfork"sv, 58},
        {"execve"sv, 59},
        {"exit"sv, 60},
        {"wait4"sv, 61},
        {"kill"sv, 62},
        {"uname"sv, 63},
        {"semget"sv, 64},
        {"semop"sv, 65},
        {"semctl"sv, 66},
        {"shmdt"sv, 67},
        {"msgget"sv, 68},
        {"msgsnd"sv, 69},
        {"msgrcv"sv, 70},
        {"msgctl"sv, 71},
        {"fcntl"sv, 72},
        {"flock"sv, 73},
        {"fsync"sv, 74},
        {"fdatasync"sv, 75},
        {"truncate"sv, 76},
        {"ftruncate"sv, 77},
        {"getdents"sv, 78},
        {"getcwd"sv, 79},
        {"chdir"sv, 80},
        {"fchdir"sv, 81},
        {"rename"sv, 82},
        {"mkdir"sv, 83},
        {"rmdir"sv, 84},
        {"creat"sv, 85},
        {"link"sv, 86},
        {"unlink"sv, 87},
        {"symlink"sv, 88},
        {"readlink"sv, 89},
        {"chmod"sv, 90},
        {"fchmod"sv, 91},
        {"chown"sv, 92},
        {"fchown"sv, 93},
        {"lchown"sv, 94},
        {"umask"sv, 95},
        {"gettimeofday"sv, 96},
        {"getrlimit"sv, 97},
        {"getrusage"sv, 98},
        {"sysinfo"sv, 99},
        {"times"sv, 100},
        {"ptrace"sv, 101},
        {"getuid"sv, 102},
        {"syslog"sv, 103},
        {"getgid"sv, 104},
        {"setuid"sv, 105},
        {"setgid"sv, 106},
        {"geteuid"sv, 107},
        {"getegid"sv, 108},
        {"setpgid"sv, 109},
        {"getppid"sv, 110},
        {"getpgrp"sv, 111},
        {"setsid"sv, 112},
        {"setreuid"sv, 113},
        {"setregid"sv, 114},
        {"getgroups"sv, 115},
        {"setgroups"sv, 116},
        {"setresuid"sv, 117},
        {"getresuid"sv, 118},
        {"setresgid"sv, 119},
        {"getresgid"sv, 120},
        {"getpgid"sv, 121},
        {"setfsuid"sv, 122},
        {"setfsgid"sv, 123},
        {"getsid"sv, 124},
        {"capget"sv, 125},
        {"capset"sv, 126},
        {"rt_sigpending"sv, 127},
        {"rt_sigtimedwait"sv, 128},
        {"rt_sigqueueinfo"sv, 129},
        {"rt_sigsuspend"sv, 130},
        {"sigaltstack"sv, 131},
        {"utime"sv, 132},
        {"mknod"sv, 133},
        {"uselib"sv, 134},
        {"personality"sv, 135},
        {"ustat"sv, 136},
        {"statfs"sv, 137},
        {"fstatfs"sv, 138},
        {"sysfs"sv, 139},
        {"getpriority"sv, 140},
        {"setpriority"sv, 141},
        {"sched_setparam"sv, 142},
        {"sched_getparam"sv, 143},
        {"sched_setscheduler"sv, 144},
        {"sched_getscheduler"sv, 145},
        {"sched_get_priority_max"sv, 146},
        {"sched_get_priority_min"sv, 147},
        {"sched_rr_get_interval"sv, 148},
        {"mlock"sv, 149},
        {"munlock"sv, 150},
        {"mlockall"sv, 151},
        {"munlockall"sv, 152},
        {"vhangup"sv, 153},
        {"modify_ldt"sv, 154},
        {"pivot_root"sv, 155},
        {"_sysctl"sv, 156},
        {"prctl"sv, 157},
        {"arch_prctl"sv, 158},
        {"adjtimex"sv, 159},
        {"setrlimit"sv, 160},
        {"chroot"sv, 161},
        {"sync"sv, 162},
        {"acct"sv, 163},
        {"settimeofday"sv, 164},
        {"mount"sv, 165},
        {"umount2"sv, 166},
        {"swapon"sv, 167},
        {"swapoff"sv, 168},
        {"reboot"sv, 169},
        {"sethostname"sv, 170},
        {"setdomainname"sv, 171},
        {"iopl"sv, 172},
        {"ioperm"sv, 173},
        {"create_module"sv, 174},
        {"init_module"sv, 175},
        {"delete_module"sv, 176},
        {"get_kernel_syms"sv, 177},
        {"query_module"sv, 178},
        {"quotactl"sv, 179},
        {"nfsservctl"sv, 180},
        {"getpmsg"sv, 181},
        {"putpmsg"sv, 182},
        {"afs_syscall"sv, 183},
        {"tuxcall"sv, 184},
        {"security"sv, 185},
        {"gettid"sv, 186},
        {"readahead"sv, 187},
        {"setxattr"sv, 188},
        {"lsetxattr"sv, 189},
        {"fsetxattr"sv, 190},
        {"getxattr"sv, 191},
        {"lgetxattr"sv, 192},
        {"fgetxattr"sv, 193},
        {"listxattr"sv, 194},
        {"llistxattr"sv, 195},
        {"flistxattr"sv, 196},
        {"removexattr"sv, 197},
        {"lremovexattr"sv, 198},
        {"fremovexattr"sv, 199},
        {"tkill"sv, 200},
        {"time"sv, 201},
        {"futex"sv, 202},
        {"sched_setaffinity"sv, 203},
        {"sched_getaffinity"sv, 204},
        {"set_thread_area"sv, 205},
        {"io_setup"sv, 206},
        {"io_destroy"sv, 207},
        {"io_getevents"sv, 208},
        {"io_submit"sv, 209},
        {"io_cancel"sv, 210},
        {"get_thread_area"sv, 211},
        {"lookup_dcookie"sv, 212},
        {"epoll_create"sv, 213},
        {"epoll_ctl_old"sv, 214},
        {"epoll_wait_old"sv, 215},
        {"remap_file_pages"sv, 216},
        {"getdents64"sv, 217},
        {"set_tid_address"sv, 218},
        {"restart_syscall"sv, 219},
        {"semtimedop"sv, 220},
        {"fadvise64"sv, 221},
        {"timer_create"sv, 222},
        {"timer_settime"sv, 223},
        {"timer_gettime"sv, 224},
        {"timer_getoverrun"sv, 225},
        {"timer_delete"sv, 226},
        {"clock_settime"sv, 227},
        {"clock_gettime"sv, 228},
        {"clock_getres"sv, 229},
        {"clock_nanosleep"sv, 230},
        {"exit_group"sv, 231},
        {"epoll_wait"sv, 232},
        {"epoll_ctl"sv, 233},
        {"tgkill"sv, 234},
        {"utimes"sv, 235},
        {"vserver"sv, 236},
        {"mbind"sv, 237},
        {"set_mempolicy"sv, 238},
        {"get_mempolicy"sv, 239},
        {"mq_open"sv, 240},
        {"mq_unlink"sv, 241},
        {"mq_timedsend"sv, 242},
        {"mq_timedreceive"sv, 243},
        {"mq_notify"sv, 244},
        {"mq_getsetattr"sv, 245},
        {"kexec_load"sv, 246},
        {"waitid"sv, 247},
        {"add_key"sv, 248},
        {"request_key"sv, 249},
        {"keyctl"sv, 250},
        {"ioprio_set"sv, 251},
        {"ioprio_get"sv, 252},
        {"inotify_init"sv, 253},
        {"inotify_add_watch"sv, 254},
        {"inotify_rm_watch"sv, 255},
        {"migrate_pages"sv, 256},
        {"openat"sv, 257},
        {"mkdirat"sv, 258},
        {"mknodat"sv, 259},
        {"fchownat"sv, 260},
        {"futimesat"sv, 261},
        {"newfstatat"sv, 262},
        {"unlinkat"sv, 263},
        {"renameat"sv, 264},
        {"linkat"sv, 265},
        {"symlinkat"sv, 266},
        {"readlinkat"sv, 267},
        {"fchmodat"sv, 268},
        {"faccessat"sv, 269},
        {"pselect6"sv, 270},
        {"ppoll"sv, 271},
        {"unshare"sv, 272},
        {"set_robust_list"sv, 273},
        {"get_robust_list"sv, 274},
        {"splice"sv, 275},
        {"tee"sv, 276},
        {"sync_file_range"sv, 277},
        {"vmsplice"sv, 278},
        {"move_pages"sv, 279},
        {"utimensat"sv, 280},
        {"epoll_pwait"sv, 281},
        {"signalfd"sv, 282},
        {"timerfd_create"sv, 283},
        {"eventfd"sv, 284},
        {"fallocate"sv, 285},
        {"timerfd_settime"sv, 286},
        {"timerfd_gettime"sv, 287},
        {"accept4"sv, 288},
        {"signalfd4"sv, 289},
        {"eventfd2"sv, 290},
        {"epoll_create1"sv, 291},
        {"dup3"sv, 292},
        {"pipe2"sv, 293},
        {"inotify_init1"sv, 294},
        {"preadv"sv, 295},
        {"pwritev"sv, 296},
        {"rt_tgsigqueueinfo"sv, 297},
        {"perf_event_open"sv, 298},
        {"recvmmsg"sv, 299},
        {"fanotify_init"sv, 300},
        {"fanotify_mark"sv, 301},
        {"prlimit64"sv, 302},
        {"name_to_handle_at"sv, 303},
        {"open_by_handle_at"sv, 304},
        {"clock_adjtime"sv, 305},
        {"syncfs"sv, 306},
        {"sendmmsg"sv, 307},
        {"setns"sv, 308},
        {"getcpu"sv, 309},
        {"process_vm_readv"sv, 310},
        {"process_vm_writev"sv, 311},
        {"kcmp"sv, 312},
        {"finit_module"sv, 313},
        {"sched_setattr"sv, 314},
        {"sched_getattr"sv, 315},
        {"renameat2"sv, 316},
        {"seccomp"sv, 317},
        {"getrandom"sv, 318},
        {"memfd_create"sv, 319},
        {"kexec_file_load"sv, 320},
        {"bpf"sv, 321},
        {"execveat"sv, 322},
        {"userfaultfd"sv, 323},
        {"membarrier"sv, 324},
        {"mlock2"sv, 325},
        {"copy_file_range"sv, 326},
        {"preadv2"sv, 327},
        {"pwritev2"sv, 328},
        {"pkey_mprotect"sv, 329},
        {"pkey_alloc"sv, 330},
        {"pkey_free"sv, 331},
        {"statx"sv, 332},
        {"io_pgetevents"sv, 333},
        {"rseq"sv, 334},
        {"pidfd_send_signal"sv, 424},
        {"io_uring_setup"sv, 425},
        {"io_uring_enter"sv, 426},
        {"io_uring_register"sv, 427},
        {"open_tree"sv, 428},
        {"move_mount"sv, 429},
        {"fsopen"sv, 430},
        {"fsconfig"sv, 431},
        {"fsmount"sv, 432},
        {"fspick"sv, 433},
        {"pidfd_open"sv, 434},
        {"clone3"sv, 435},
        {"close_range"sv, 436},
        {"openat2"sv, 437},
        {"pidfd_getfd"sv, 438},
        {"faccessat2"sv, 439},
        {"process_madvise"sv, 440},
        {"epoll_pwait2"sv, 441},
        {"mount_setattr"sv, 442},
        {"quotactl_fd"sv, 443},
        {"landlock_create_ruleset"sv, 444},
        {"landlock_add_rule"sv, 445},
        {"landlock_restrict_self"sv, 446},
        {"memfd_secret"sv, 447},
        {"process_mrelease"sv, 448},
        {"futex_waitv"sv, 449},
    };
    auto res = map.find(syscallName);
    if (res != map.end())
        return res->second;
    else {
        return std::nullopt;
    }
}
